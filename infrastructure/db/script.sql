DROP DATABASE IF EXISTS EXAMENWAOS;
CREATE DATABASE IF NOT EXISTS EXAMENWAOS;
USE EXAMENWAOS;

CREATE TABLE IF NOT EXISTS USERS(
    id INT NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(15) NOT NULL,
    role ENUM('Admin','Client') DEFAULT 'Client' NOT NULL,
    token VARCHAR(255),
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT user_email UNIQUE(email),
    CONSTRAINT usersPK PRIMARY KEY(id)
);

CREATE TABLE IF NOT EXISTS EVENTS(
    id INT NOT NULL AUTO_INCREMENT,
    event_name VARCHAR(255) NOT NULL,
    description VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    location VARCHAR(255) NOT NULL,
    ticket_price DECIMAL(10,2) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT eventsPK PRIMARY KEY(id)
);

CREATE TABLE IF NOT EXISTS ORDERS(
    id INT NOT NULL AUTO_INCREMENT,
    user_id INT NOT NULL,
    event_id INT NOT NULL,
    ticket_quantity INT NOT NULL,
    total_price DECIMAL(10,2) NOT NULL,
    seat VARCHAR(4) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT orderPK PRIMARY KEY(id),
    CONSTRAINT userFK FOREIGN KEY(user_id) REFERENCES USERS(id),
    CONSTRAINT eventFK FOREIGN KEY(event_id) REFERENCES EVENTS(id)
);

ALTER TABLE ORDERS ADD COLUMN status ENUM('Completed', 'Canceled') DEFAULT 'Completed' NOT NULL;
ALTER TABLE ORDERS ADD COLUMN payment_id VARCHAR(255) NOT NULL;

ALTER TABLE ORDERS MODIFY COLUMN payment_id VARCHAR(255) NULL;